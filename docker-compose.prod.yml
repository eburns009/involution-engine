# Involution Engine - Production Docker Compose
# For production deployment with full security and monitoring

version: '3.8'

services:
  # Reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: involution-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - engine-1
      - engine-2
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main calculation engine (instance 1)
  engine-1:
    build:
      context: ./engine
      dockerfile: Dockerfile
      target: production
    container_name: involution-engine-1
    expose:
      - "8000"
    environment:
      - ENV=production
      - DEBUG=0
      - WORKERS=4
      - WORKER_TIMEOUT=30
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - REDIS_URL=redis://redis:6379/0
      - RATE_LIMIT_STORAGE_URI=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - METRICS_ENABLED=true
      - ENABLE_SECURITY_HEADERS=true
    volumes:
      - kernel_cache:/app/kernels:ro
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Main calculation engine (instance 2)
  engine-2:
    build:
      context: ./engine
      dockerfile: Dockerfile
      target: production
    container_name: involution-engine-2
    expose:
      - "8000"
    environment:
      - ENV=production
      - DEBUG=0
      - WORKERS=4
      - WORKER_TIMEOUT=30
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - REDIS_URL=redis://redis:6379/0
      - RATE_LIMIT_STORAGE_URI=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - METRICS_ENABLED=true
      - ENABLE_SECURITY_HEADERS=true
    volumes:
      - kernel_cache:/app/kernels:ro
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Time resolver service
  time-resolver:
    build:
      context: ./time_resolver
      dockerfile: Dockerfile
      target: production
    container_name: involution-time-resolver
    expose:
      - "5000"
    environment:
      - ENV=production
      - WORKERS=2
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - REDIS_URL=redis://redis:6379/1
      - POSTGRES_URL=postgresql://involution_user:${DB_PASSWORD}@postgres:5432/involution
    volumes:
      - ./time_resolver/patches:/app/patches:ro
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: involution-redis
    expose:
      - "6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: involution-postgres
    expose:
      - "5432"
    environment:
      - POSTGRES_DB=involution
      - POSTGRES_USER=involution_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./scripts/init-prod-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U involution_user -d involution"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nominatim geocoding service
  nominatim:
    image: mediagis/nominatim:4.2
    container_name: involution-nominatim
    expose:
      - "8080"
    environment:
      - PBF_URL=${NOMINATIM_PBF_URL}
      - REPLICATION_URL=${NOMINATIM_REPLICATION_URL}
      - IMPORT_WIKIPEDIA=false
      - IMPORT_US_POSTCODES=false
      - IMPORT_GB_POSTCODES=false
      - THREADS=4
      - NOMINATIM_PASSWORD=${NOMINATIM_PASSWORD}
    volumes:
      - nominatim_data:/var/lib/postgresql/14/main
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 4G

  # Monitoring and metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: involution-prometheus
    expose:
      - "9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  # Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: involution-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: involution-loki
    expose:
      - "3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    profiles:
      - monitoring

  # Log shipping
  promtail:
    image: grafana/promtail:latest
    container_name: involution-promtail
    volumes:
      - ./logs:/var/log/involution:ro
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    profiles:
      - monitoring

  # Backup service
  backup:
    image: alpine:latest
    container_name: involution-backup
    volumes:
      - postgres_data:/backup/postgres:ro
      - redis_data:/backup/redis:ro
      - kernel_cache:/backup/kernels:ro
      - ./backups:/backup/output
      - ./scripts/backup.sh:/backup/backup.sh:ro
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=30
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: crond -f
    restart: unless-stopped
    profiles:
      - backup

volumes:
  kernel_cache:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  nominatim_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  default:
    name: involution-prod
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

secrets:
  db_password:
    external: true
  redis_password:
    external: true
  ssl_cert:
    external: true
  ssl_key:
    external: true