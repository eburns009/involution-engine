name: Quick Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [ main, develop ]

env:
  PYTHONDONTWRITEBYTECODE: "1"

jobs:
  quick-validation:
    runs-on: ubuntu-latest
    name: Quick Quality Check
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Install minimal dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy

      - name: Quick format check
        run: |
          black --check --diff engine/main.py engine/time_resolver*.py

      - name: Quick lint check
        run: |
          ruff check engine/main.py engine/time_resolver*.py tests/batch/accuracy_compare.py tests/batch/batch_compute_positions.py

      - name: Quick type check
        run: |
          mypy engine/main.py --ignore-missing-imports --disable-error-code=union-attr --disable-error-code=call-arg
        continue-on-error: true

      - name: Check for debugging artifacts
        run: |
          # Check for debugging print statements
          if grep -r "print(" engine/main.py engine/time_resolver*.py; then
            echo "‚ùå Found debugging print statements - please use logging instead"
            exit 1
          fi

          # Check for TODO/FIXME comments
          if grep -r -i "TODO\|FIXME\|XXX" engine/main.py; then
            echo "‚ö†Ô∏è  Found TODO/FIXME comments in main code"
          fi

      - name: Documentation check
        run: |
          # Verify key documentation files exist
          required_docs=("README.md" "docs/api.md" "docs/roadmap.md" "docs/accuracy.md")

          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "‚ùå Missing required documentation: $doc"
              exit 1
            else
              echo "‚úÖ Found: $doc"
            fi
          done

      - name: Configuration validation
        run: |
          # Check pyproject.toml exists and is valid
          if [ ! -f "pyproject.toml" ]; then
            echo "‚ùå Missing pyproject.toml"
            exit 1
          fi

          # Validate Python syntax
          python -m py_compile engine/main.py
          echo "‚úÖ Python syntax validation passed"

      - name: Quick smoke test (no kernels)
        run: |
          # Test imports work correctly
          cd engine && python -c "
          try:
              import main
              print('‚úÖ Main module imports successfully')
          except ImportError as e:
              print(f'‚ùå Import error: {e}')
              exit(1)
          except Exception as e:
              print(f'‚ö†Ô∏è  Import warning (expected without kernels): {e}')
          "

  security-quick-scan:
    runs-on: ubuntu-latest
    name: Quick Security Scan
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Quick security scan
        run: |
          # Bandit security scan
          bandit -r engine/main.py engine/time_resolver*.py --exit-zero-on-skipped -f txt

          # Check for common security issues
          echo "üîç Checking for hardcoded secrets..."
          if grep -r -i "password\|secret\|token\|key.*=" engine/ --exclude-dir=__pycache__ | grep -v "# nosec"; then
            echo "‚ö†Ô∏è  Potential hardcoded secrets found"
          else
            echo "‚úÖ No obvious hardcoded secrets detected"
          fi

      - name: Dependency safety check
        run: |
          # Quick dependency safety check
          if [ -f "engine/requirements.txt" ]; then
            safety check --file=engine/requirements.txt --continue-on-error || echo "‚ö†Ô∏è  Some dependency vulnerabilities detected"
          fi

  path-check:
    runs-on: ubuntu-latest
    name: Path & Structure Check
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4

      - name: Validate repository structure
        run: |
          echo "üèóÔ∏è  Validating repository structure..."

          # Check for required directories
          required_dirs=("engine" "tests" "docs" "examples" ".github/workflows")

          for dir in "${required_dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "‚ùå Missing required directory: $dir"
              exit 1
            else
              echo "‚úÖ Found directory: $dir"
            fi
          done

          # Check for key files in correct locations
          key_files=(
            "engine/main.py"
            "engine/requirements.txt"
            "tests/batch/accuracy_compare.py"
            "examples/five_random/README.md"
            "pyproject.toml"
          )

          for file in "${key_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing key file: $file"
              exit 1
            else
              echo "‚úÖ Found file: $file"
            fi
          done

      - name: Check for large files
        run: |
          echo "üìè Checking for large files..."

          # Find files larger than 10MB (excluding .git)
          large_files=$(find . -name ".git" -prune -o -type f -size +10M -print)

          if [ -n "$large_files" ]; then
            echo "‚ö†Ô∏è  Large files detected (>10MB):"
            echo "$large_files"
            echo "Consider using Git LFS for large files"
          else
            echo "‚úÖ No large files detected"
          fi

      - name: Validate import paths
        run: |
          echo "üîó Validating import paths..."

          # Check for relative imports that might break
          if grep -r "from \.\." engine/ tests/ 2>/dev/null; then
            echo "‚ö†Ô∏è  Found relative imports that might cause issues"
          else
            echo "‚úÖ Import paths look good"
          fi

  quick-summary:
    runs-on: ubuntu-latest
    name: Quick Check Summary
    needs: [quick-validation, security-quick-scan, path-check]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## Quick Check Summary"
          echo "- Code Quality: ${{ needs.quick-validation.result }}"
          echo "- Security Scan: ${{ needs.security-quick-scan.result }}"
          echo "- Structure Check: ${{ needs.path-check.result }}"

          if [[ "${{ needs.quick-validation.result }}" == "success" && "${{ needs.security-quick-scan.result }}" == "success" && "${{ needs.path-check.result }}" == "success" ]]; then
            echo "‚úÖ All quick checks passed! Ready for comprehensive testing."
          else
            echo "‚ùå Some quick checks failed. Please review before comprehensive testing."
            exit 1
          fi