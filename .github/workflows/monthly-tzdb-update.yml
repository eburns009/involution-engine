name: Monthly TZDB Update Check

on:
  schedule:
    - cron: "0 9 1 * *"  # 9 AM UTC on 1st of every month
  workflow_dispatch:  # Allow manual runs

jobs:
  check-tzdb-update:
    name: Check for TZDB Updates
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install tzdata requests

      - name: Check current TZDB version
        id: current
        run: |
          python -c "
          import tzdata
          print(f'Current tzdata version: {tzdata.__version__}')
          print(f'::set-output name=version::{tzdata.__version__}')
          "

      - name: Check for new TZDB version
        id: check
        run: |
          python -c "
          import requests
          import json
          from packaging import version

          # Get current version
          import tzdata
          current = tzdata.__version__

          # Check PyPI for latest tzdata version
          resp = requests.get('https://pypi.org/pypi/tzdata/json')
          latest = resp.json()['info']['version']

          print(f'Current: {current}')
          print(f'Latest: {latest}')

          needs_update = version.parse(latest) > version.parse(current)
          print(f'Needs update: {needs_update}')

          print(f'::set-output name=current::{current}')
          print(f'::set-output name=latest::{latest}')
          print(f'::set-output name=needs_update::{str(needs_update).lower()}')
          "

      - name: Log TZDB version info
        run: |
          echo "TZDB Version Check Results:"
          echo "  Current: ${{ steps.check.outputs.current }}"
          echo "  Latest:  ${{ steps.check.outputs.latest }}"
          echo "  Update needed: ${{ steps.check.outputs.needs_update }}"

      - name: Create update issue
        if: steps.check.outputs.needs_update == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const current = '${{ steps.check.outputs.current }}';
            const latest = '${{ steps.check.outputs.latest }}';

            const title = `Update TZDB to version ${latest}`;
            const body = `## TZDB Update Available

            A new TZDB version is available:
            - **Current**: \`${current}\`
            - **Latest**: \`${latest}\`

            ### Actions Required:
            1. Update \`tzdata\` package in requirements.txt
            2. Run time resolver audit to verify compatibility
            3. Test historical timezone resolution accuracy
            4. Deploy updated time resolver

            ### Testing Checklist:
            - [ ] \`pip install tzdata==${latest}\`
            - [ ] Run \`python time_resolver_kit/time_audit_runner.py\`
            - [ ] Verify all 15/15 tests pass
            - [ ] Check logs for new TZDB version
            - [ ] Test gap/fold handling

            **Auto-generated by monthly TZDB update check**
            `;

            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'tzdb-update'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes(`Update TZDB to version ${latest}`)
            );

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['tzdb-update', 'time-resolver']
              });
              console.log(`Created TZDB update issue for version ${latest}`);
            } else {
              console.log(`TZDB update issue already exists: ${existingIssue.html_url}`);
            }

      - name: Run Time Resolver Audit with Current Version
        run: |
          cd services/spice && python -m uvicorn main:app --host 127.0.0.1 --port 8000 &
          sleep 5
          cd ../../ && python time_resolver_kit/time_audit_runner.py \
            --base-url http://127.0.0.1:8000 \
            --input-csv time_resolver_kit/time_audit_input_template.csv \
            --out-csv time_resolver_kit/monthly_tzdb_audit.csv
          pkill -f uvicorn || true
        env:
          DISABLE_RATE_LIMIT: "1"